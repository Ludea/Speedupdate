name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            rust_target: x86_64-unknown-linux-musl
            target: linux_x86_64
          - platform: macos-latest
            rust_target: x86_64-apple-darwin
            target: macos_x86_64
          - platform: macos-latest
            rust_target: aarch64-apple-darwin
            target: macos_aarch64
          - platform: windows-latest
            rust_target: x86_64-pc-windows-msvc
            target: windows_x86_64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v5
      - name: Set Github sha short (Linux and Macos) 
        if: matrix.platform != 'windows-latest'
        run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV 
      - name: Set Github sha short (Windows)
        if: matrix.platform == 'windows-latest'
        run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})" >> $env:GITHUB_ENV 
      - name: install deps (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: sudo apt update && sudo apt install -y musl-dev musl-tools
      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.rust_target }}
      - uses: Swatinem/rust-cache@v2
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: fmt
        run: cargo fmt --all -- --check
      - name: Build binaries
        run: cargo build --release --verbose
      - name: Move Macos and Linux binaries
        if: matrix.platform != 'windows-latest'
        run: |
           mv target/${{ matrix.rust_target }}/release/speedupdate target/release/speedupdate-${{ env.GITHUB_SHA_SHORT }}_${{ matrix.target}}
           mv target/${{ matrix.rust_target }}/release/speedupdateserver target/release/speedupdateserver-${{ env.GITHUB_SHA_SHORT }}_${{ matrix.target }}
      - name: Move Windows binaries
        if: matrix.platform == 'windows-latest'
        run: |
           mv target/${{ matrix.rust_target }}/release/speedupdate.exe target/release/speedupdate-${{ env.GITHUB_SHA_SHORT }}_${{ matrix.target}}.target
           mv target/${{ matrix.rust_target }}/release/speedupdateserver.exe target/release/speedupdateserver-${{ env.GITHUB_SHA_SHORT }}_${{ matrix.target }}.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: speedupdate-${{ env.GITHUB_SHA_SHORT }}_${{ matrix.target }}
          if-no-files-found: error
          path: |
            target/release/speedupdate-*
            target/release/speedupdateserver-*

  build-arm64-linux:
    runs-on: ubuntu-latest
    container:
      image: messense/rust-musl-cross:aarch64-musl
    steps:
    - uses: actions/checkout@v5
    - run: git config --global --add safe.directory /__w/speedupdate-rs/speedupdate-rs 
    - name: Set outputs
      run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV 
    - name: Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    - name: fmt
      run: cargo fmt --all -- --check
    - name: Build and move aarch64 Linux binaries
      run: |
        cargo build --release --verbose
        mv target/aarch64-unknown-linux-musl/release/speedupdate target/release/speedupdate-${{ env.GITHUB_SHA_SHORT }}_linux_arm64
        mv target/aarch64-unknown-linux-musl/release/speedupdateserver target/release/speedupdateserver-${{ env.GITHUB_SHA_SHORT }}_linux_arm64
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: speedupdate-${{ env.GITHUB_SHA_SHORT }}_linux_arm64
        if-no-files-found: error
        path: |
          target/release/speedupdate-*
          target/release/speedupdateserver-*

  build-container:
    runs-on: ubuntu-22.04
    needs: [build-arm64-linux, build]
    steps:
      - uses: actions/checkout@v5
      - name: Set Github sha short
        run: echo "GITHUB_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV 
      - uses: actions/download-artifact@v5
        with:
          pattern: speedupdate-*
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build container
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          context: .
          push: true
          tags: ludea/speedupdate:latest
          platforms: linux/amd64, linux/arm64
          build-args: |
            VERSION=${{ env.GITHUB_SHA_SHORT }}
